version: 2.1

orbs: 
  slack: circleci/slack@4.10.1

commands:
  slack-notification_on_fail:
    steps:
      - slack/notify:
          event: fail
          mentions: '@Peter Abolude'
          template: basic_fail_1

  destroy-environment:
    description: delete stacks on failure
    parameters:
      workflow-id:
        type: string
        default: "{CIRCLE_WORKFLOW_ID:0:7}"
    steps:
      - run:
          name: Destroy Environment
          when: on_fail
          command: |
            aws cloudformation delete-stack \
              --stack-name udapeople-backend-<< parameters.workflow-id >> \
              --region us-east-1
            aws cloudformation delete-stack \
              --stack-name udapeople-frontend-<< parameters.workflow-id >> \
              --region us-east-1

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack-notification_on_fail
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build backend-end
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack-notification_on_fail
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-frontend]
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run test
      - slack-notification_on_fail
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-backend]
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test
      - slack-notification_on_fail
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-frontend]
      - run:
          name: Analyze for security vulnerability in frontend
          command: |
            cd frontend
            npm install
            npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
      - slack-notification_on_fail
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-backend]
      - run:
          name: Analyze for security vulnerability in backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
      - slack-notification_on_fail
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install tar and gzip
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=cfcife \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=cfcife \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --region ${AWS_DEFAULT_REGION} \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --output text >> inventory   
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
  configure-infrastructure:
    docker:
      - image: python:3.9.0-alpine
    steps:
      - checkout
      - add_ssh_keys:
         fingerprints: ["69:a5:45:33:4f:b5:de:00:fd:43:42:4b:7c:3b:cc:86"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk update
            apk add --no-cache gzip
            apk add --no-cache tar
            apk add --no-cache curl
            apk add --no-cache --upgrade bash
            apk add --no-cache --update ansible
            apk add --no-cache openssh-client
            apk add --no-cache aws-cli
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          workflow-id: "${CIRCLE_WORKFLOW_ID:0:7}"

workflows:
  default:
    jobs:
      - build-frontend:
          context: slack-secrets
      - build-backend:
          context: slack-secrets
      - test-frontend:
          context: slack-secrets
          requires: [build-frontend]
      - test-backend:
          context: slack-secrets
          requires: [build-backend]
      - scan-frontend:
          context: slack-secrets
          requires: [build-frontend]
      - scan-backend:
          context: slack-secrets
          requires: [build-backend]
      - deploy-infrastructure:
          context: slack-secrets
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]